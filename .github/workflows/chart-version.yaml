name: Chart Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'patch'
          - 'minor'
          - 'major'
  push:
    branches:
      - main
    paths:
      - 'chart/**'
      - '.github/workflows/chart-version.yaml'

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version-changed: ${{ steps.check-changes.outputs.version-changed }}
      new-version: ${{ steps.bump.outputs.new-version }}
      previous-version: ${{ steps.bump.outputs.previous-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if this is a version bump commit
        id: check-version-commit
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^(Bump chart version|Update chart version) ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "This is a version bump commit, skipping to avoid infinite loop"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        id: determine-type
        if: steps.check-version-commit.outputs.skip == 'false'
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # For push events, use auto-detection
            echo "type=auto" >> $GITHUB_OUTPUT
          fi

      - name: Bump chart version
        id: bump
        if: steps.check-version-commit.outputs.skip == 'false'
        run: |
          chmod +x ./scripts/bump-chart-version.sh
          
          # Get current version before bump
          PREVIOUS_VERSION=$(grep "^version:" chart/kronic/Chart.yaml | awk '{print $2}' | tr -d '"')
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          
          # Perform version bump
          ./scripts/bump-chart-version.sh ${{ steps.determine-type.outputs.type }}
          
          # Get new version after bump
          NEW_VERSION=$(grep "^version:" chart/kronic/Chart.yaml | awk '{print $2}' | tr -d '"')
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: check-changes
        if: steps.check-version-commit.outputs.skip == 'false'
        run: |
          if git diff --quiet chart/kronic/Chart.yaml; then
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "No version changes detected"
          else
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "Version changes detected"
          fi

      - name: Commit version bump
        if: steps.check-changes.outputs.version-changed == 'true'
        run: |
          git add chart/kronic/Chart.yaml
          git commit -m "Bump chart version from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.new-version }}"
          git push

  create-release:
    needs: bump-version
    runs-on: ubuntu-latest
    if: needs.bump-version.outputs.version-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin main

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Package chart and create release
        run: |
          # Create tag for the new version
          NEW_VERSION="${{ needs.bump-version.outputs.new-version }}"
          TAG_NAME="kronic-chart-${NEW_VERSION}"
          
          git tag -a "$TAG_NAME" -m "Release Helm chart version $NEW_VERSION"
          git push origin "$TAG_NAME"
          
          # Package the chart
          mkdir -p .cr-release-packages
          helm package chart/kronic -d .cr-release-packages
          
          echo "Created tag: $TAG_NAME"
          echo "Packaged chart version: $NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "kronic-chart-${{ needs.bump-version.outputs.new-version }}"
          name: "Helm Chart v${{ needs.bump-version.outputs.new-version }}"
          body: |
            ## Helm Chart Release v${{ needs.bump-version.outputs.new-version }}
            
            ### Changes
            - Chart version bumped from ${{ needs.bump-version.outputs.previous-version }} to ${{ needs.bump-version.outputs.new-version }}
            
            ### Installation
            ```bash
            helm repo add kronic https://davides93.github.io/kronic/charts
            helm repo update
            helm install my-kronic kronic/kronic --version ${{ needs.bump-version.outputs.new-version }}
            ```
            
            ### Files
            - kronic-${{ needs.bump-version.outputs.new-version }}.tgz
          files: |
            .cr-release-packages/*.tgz
          draft: false
          prerelease: false

  update-changelog:
    needs: [bump-version, create-release]
    runs-on: ubuntu-latest
    if: needs.bump-version.outputs.version-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin main

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ needs.bump-version.outputs.new-version }}"
          PREV_VERSION="${{ needs.bump-version.outputs.previous-version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create temporary file with new changelog entry
          cat > /tmp/new_changelog.md << EOF
          # Change Log
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [${NEW_VERSION}] - ${DATE}
          
          ### Changed
          - Updated Helm chart version from ${PREV_VERSION} to ${NEW_VERSION}
          
          EOF
          
          # Append existing changelog content (skip the header)
          tail -n +8 CHANGELOG.md >> /tmp/new_changelog.md
          
          # Replace the original file
          mv /tmp/new_changelog.md CHANGELOG.md

      - name: Commit changelog update
        run: |
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for chart version ${{ needs.bump-version.outputs.new-version }}"
          git push